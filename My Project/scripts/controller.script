local zjson = require "fbinstant.utils.json"
local input_up = hash("move_up")
local input_down = hash("move_down")
local input_left = hash("move_left")
local input_right = hash("move_right")
local input_swap = hash("swap")
local flipr = hash("flipr")
local left = hash("left")
local right = hash("right")
local up = hash("up")
local down = hash("down")
local showClue = hash("showClue")
local soundOn = hash("soundOn")
local soundOff = hash("soundOff")
local startSound = hash("startSound")
local buttonSound = hash("buttonSound")
local playFlipSound = hash("playFlipSound")
local retry = hash("retry")
local share = hash("share")
local next = hash("next")
local ids = {}
local sol = {}
local nextSol = {}
local currentBoard = {}
local nextBoard = {}
local blinkyPos = {}
blinkyPos[1] = 111
local startGrid = {}
local verticaljump = {}
local horizontalJump = {}
local horizontal =true
local vertical = false
local recursed = false
local currentLevel = 1
local noLevel = false
local noConnection = false
local yesConnection = false
local nextLevelReady = false
local pause = 0
local canShow = false
local canLoad = true
local level_placement = "426559372102433_446324906792546"
local ad_id1 = " "
local apis_json = fbinstant.get_supported_apis()
local apis = json.decode(apis_json)



local function move(z)
	local a = blinkyPos[1]+z
	local b = blinkyPos[2]+z
		for i,id in ipairs(ids) do	
			msg.post(id, "stop", {oldBlink = blinkyPos})	
		end

		blinkyPos[1]=a
		blinkyPos[2]=b
		for i,id in ipairs(ids) do	
			msg.post(id, "move", {newBlink = blinkyPos})	
		end
		msg.post("controller#move", "play_sound")
	end

local function switchAxis()
	if horizontal==true then
		vertical=true
		horizontal=false
	else
		vertical=false
		horizontal=true
	end
end

local function switchBlinky()
	local a=blinkyPos[1]
	local b=blinkyPos[2]
	blinkyPos[1]=b
	blinkyPos[2]=a
end

local function findHorizontalBlinky2(a)
	local b =0
	if a>0 and a<12 then
		 b=a+110
	elseif a>11 and a<23 then
		 b=a+88
	elseif a>22 and a<34 then
		 b=a+66
	elseif a>33 and a<45 then
		 b=a+44
	elseif a>44 and a<56 then
		b=a+22 
	elseif a>55 and a<67 then
		b=404
	elseif a>66 and a<78 then
		 b=a-22
	elseif a>77 and a<89 then
		 b=a-44
	elseif a>88 and a<100 then
		 b=a-66
	elseif a>99 and a<111 then
		 b=a-88
	elseif a>110 and a<122 then
		 b=a-110
	end
	
	blinkyPos[2]=b
end

local function findVerticalBlinky2(a)
	local x=a%11
	local b=0
	if x==1 then
		 b=a+10
	elseif x==2 then
		 b=a+8
	elseif x==3 then
		 b=a+6
	elseif x==4 then
		 b=a+4
	elseif x==5 then
		b=a+2 
	elseif x==6 then
		b=404
	elseif x==7 then
		 b=a-2
	elseif x==8 then
		 b=a-4
	elseif x==9 then
		 b=a-6
	elseif x==10 then
		 b=a-8
	elseif x==0 then
		 b=a-10
	end
	blinkyPos[2]=b
end

local function gapMove(interval,changeDir,xAxis) 
	local x=interval
	local y=changeDir
	local a=blinkyPos[1]
	local edgeBoard=false
	for i=1,4 do
		local b = interval*i
		local c = a+b
		if xAxis then
			if (b+xAxis)<=1 or (b+xAxis)>=11 then
				edgeBoard=true 
			end
		end
		if not xAxis and c < 12 or c > 110 then
			edgeBoard=true
		end
		if currentBoard[c] then 
			for i,id in ipairs(ids) do	
				msg.post(id, "stop", {oldBlink = blinkyPos})	
			end	
			local e = blinkyPos[1]
			local f = blinkyPos[2]
			local d=c%11
			if c == f and not edgeBoard then 	
				recursed=true
				blinkyPos[1] = c
				if xAxis then
					gapMove(x, y, d)
				else
					gapMove(x, y) 
				end 
				
			else	
				if recursed and edgeBoard or recursed and not currentBoard[c+interval] then
					blinkyPos[1] = c
				end	
				
				if not recursed then
					blinkyPos[1] = c
				end		
				if  (currentBoard[c+interval] and changeDir and not edgeBoard) or (not currentBoard[c+interval] and not changeDir) then
					switchAxis()
				end
			end
			break
		end
	end
	
	if horizontal==true then
		findHorizontalBlinky2(blinkyPos[1])
	else
		findVerticalBlinky2(blinkyPos[1])
	end
	for i,id in ipairs(ids) do 
		msg.post(id, "move", {newBlink = blinkyPos})
	end
	msg.post("controller#move", "play_sound")
end

local function tablesEquivalent(a,b)
	local equivalent = true
	for i,v in pairs(a) do 
		if a[i] ~= b[i] then
			equivalent = false
		end
	end
	return equivalent
end



local function moveUp()
	recursed=false
	local centralCol = false
	local thirdRank=false
	local edgeRank = false
	if blinkyPos[1]>88 and blinkyPos[1]<100 or blinkyPos[1]>22 and blinkyPos[1]<34 then
		thirdRank=true
	end
	if blinkyPos[1]>110 or blinkyPos[1]<12 then
		edgeRank=true
	end
	if vertical and blinkyPos[1]<blinkyPos[2] then
		switchBlinky()
	elseif horizontal and blinkyPos[1]>blinkyPos[2] and not thirdRank then
		switchBlinky()
	elseif horizontal and blinkyPos[1]<blinkyPos[2] and thirdRank then
		switchBlinky()
	end

	local a = blinkyPos[1]+11
	if currentBoard[a] then
		if horizontal==true then
			for i,id in ipairs(ids) do	
				msg.post(id, "stop", {oldBlink = blinkyPos})	
			end
			--local x = blinkyPos[2]
			findVerticalBlinky2(blinkyPos[1])
			-- if blinkyPos[2] == 404 then
			-- 	blinkyPos[2] = x
			-- 	centralCol = true
			-- end
			for i,id in ipairs(ids) do	
				msg.post(id, "move", {newBlink = blinkyPos})	
			end
			--if not centralCol then
				switchAxis()
			--end
		else
			move(11)
		end
	else	
		if horizontal and not edgeRank then
			gapMove(11,true)
		elseif vertical then
			gapMove(11,false)
		end
	end
end
local function moveDown()
	recursed=false
	local thirdRank=false
	local centreRank=false
	if blinkyPos[1]>22 and blinkyPos[1]<34 or blinkyPos[1]>88 and blinkyPos[1]<100  then
		thirdRank=true
	end
	if blinkyPos[1]>44 and blinkyPos[1]<56 or blinkyPos[1]>66 and blinkyPos[1]<78  then
		centreRank=true
	end
	if vertical and blinkyPos[1]>blinkyPos[2] then
		switchBlinky()
	elseif horizontal and blinkyPos[1]<blinkyPos[2] and not thirdRank then 
		switchBlinky()
	elseif horizontal and blinkyPos[1]<blinkyPos[2] and thirdRank then 
		switchBlinky()
	end
	local a = blinkyPos[1]-11
	if currentBoard[a] then
		if horizontal==true then
			for i,id in ipairs(ids) do	
				msg.post(id, "stop", {oldBlink = blinkyPos})	
			end
			findVerticalBlinky2(blinkyPos[1])
			for i,id in ipairs(ids) do	
				msg.post(id, "move", {newBlink = blinkyPos})	
			end
			switchAxis()	
		else
			move(-11)
		end
	else
		if horizontal and not centreRank then
			gapMove(-11,true)
		elseif vertical then
			gapMove(-11,false)
		end
	end
end
local function moveRight()
	recursed=false
	local thirdRank=false
	local centreRank=false
	local x = blinkyPos[1]%11
	if x==3 or x==9 then
		thirdRank=true
	end
	if x==5 or x==7 then
		centreRank=true
	end	

	if horizontal and blinkyPos[1]<blinkyPos[2] then
		switchBlinky()
	elseif vertical and blinkyPos[1]>blinkyPos[2] and not thirdRank then
		switchBlinky()
	elseif vertical and blinkyPos[1]>blinkyPos[2] and thirdRank then
		switchBlinky()
	end
	
	x = blinkyPos[1]%11
	local a = blinkyPos[1]+1
	if currentBoard[a] and x ~= 0 then 
		if vertical==true then
			for i,id in ipairs(ids) do
				msg.post(id, "stop", {oldBlink = blinkyPos})	
			end
			findHorizontalBlinky2(blinkyPos[1])
			for i,id in ipairs(ids) do	
				msg.post(id, "move", {newBlink = blinkyPos})	
			end
			switchAxis()
		else
			move(1)
		end
	else 
		if vertical and not centreRank then
			gapMove(1,true,x)
		elseif horizontal and x~=0 then
			gapMove(1,false,x)
		end
	end
end
local function moveLeft()
	recursed=false
	local thirdRank=false
	local edgeRank = false	
	local x = blinkyPos[1]%11
	if x==3 or x==9 then
		thirdRank=true
	end
	if x==1 or x==0 then
		edgeRank=true
	end
	
	if horizontal and blinkyPos[1]>blinkyPos[2] then
		switchBlinky()
	elseif vertical and blinkyPos[1]<blinkyPos[2] and not thirdRank then
		switchBlinky()
	elseif vertical and blinkyPos[1]>blinkyPos[2] and thirdRank then
		switchBlinky()
	end

	x = blinkyPos[1]%11
	local a = blinkyPos[1]-1						
	if currentBoard[a] and x ~= 1 then
		if vertical==true then
			for i,id in ipairs(ids) do	
				msg.post(id, "stop", {oldBlink = blinkyPos})	
			end
			findHorizontalBlinky2(blinkyPos[1])
			for i,id in ipairs(ids) do	
				msg.post(id, "move", {newBlink = blinkyPos})	
			end
			switchAxis()
		else
			move(-1)
		end
	else 
		if vertical and not edgeRank then 
			gapMove(-1,true,x)
		elseif horizontal then
			gapMove(-1,false,x)
		end
	end
end


local function next_response(self, id, response)
	if response.status == 0 then
		nextLevelReady = true	
	end	
	local wData = json.decode(response.response)
	if response.status == 200 and not wData.error then
		yesConnection = true
		nextLevelReady = true	
	elseif  wData.error == "level was not found" then 
		noLevel = true
		nextLevelReady = true	
	end

	for k,v in pairs (wData.items[1].scrambled) do
		nextBoard [tonumber(k)] = v
	end
	for k,v in pairs(wData.items[1].solved) do
		nextSol[tonumber(k)] = v
	end
	nextLevelReady = true	
end

local function setBoard() 
	if currentLevel == 1 then
		blinkyPos[1]=74
	elseif currentLevel == 2 then
		blinkyPos[1]=69
	else
		blinkyPos[1]=111
	end	
	horizontal=true
	vertical=false 
	findHorizontalBlinky2(blinkyPos[1])
	startGrid[1]=currentBoard
	startGrid[2]=blinkyPos
	for i,id in pairs(ids) do	
		msg.post(id, "startGame", {letters=startGrid})	
	end
	msg.post("graphics", "writeLevel", {current=currentLevel})
	local placeVal = tostring(currentLevel+1)
	http.request("https://zeitnotentertainment.com/_functions/info?place="..placeVal, "GET", next_response)	
	if apis["getInterstitialAdAsync"]  and canLoad and currentLevel ~=1 then
		fbinstant.get_interstitial_ad(level_placement, function(self, ad_id, error)
			if not error then
				ad_id1 = ad_id
				fbinstant.load_interstitial_ad(ad_id1, function(self, success, error)
					if success then
						canShow = true
						canLoad = false
					end
				end)
			end
		end)
	end
end

local function updateBoard()
	for k,v in pairs (currentBoard) do
		currentBoard [k] = nil
	end
	for k,v in pairs (sol) do
		sol [k] = nil
	end
	if nextLevelReady then
		if  yesConnection then
			msg.post("graphics", "new")
			msg.post("graphics", "yesConnection")
			for k,v in pairs (nextBoard) do
				currentBoard [k] = v
			end
			for k,v in pairs (nextSol) do
				sol [k] = v
			end
			currentLevel = currentLevel+1
			setBoard()
			for k,v in pairs (nextBoard) do
				nextBoard [k] = nil
			end
			for k,v in pairs (nextSol) do
				nextSol [k] = nil
			end
			local c = {}
			local s = {}
			for k,v in pairs(currentBoard) do 
				c[tostring(k)] = currentBoard[k]
			end
			for k,v in pairs(sol) do 
				s[tostring(k)] = sol[k]
			end
			fbinstant.set_player_data(zjson.encode({
				currentf = c,
				solf = s,
				levelf = currentLevel,
			}),function(self, success)
			end)
			yesConnection = false
		elseif  noLevel then
			msg.post("graphics", "noLevel")
			noLevel = false
		else
			msg.post("graphics", "noConnection")
		end		
		nextLevelReady = false	
	else
		timer.delay(1, false, updateBoard)
	end
end
local function start_response(self, id, response)
	local wData = json.decode(response.response)
	if response.status == 200 and not wData.error then
		msg.post("graphics", "yesConnection")
	elseif  wData.error == "level was not found" then 
		msg.post("graphics", "noLevel")	
	else
		msg.post("graphics", "noConnection")
	end
	
	for k,v in pairs (wData.items[1].scrambled) do
		currentBoard [tonumber(k)] = v
	end
	for k,v in pairs(wData.items[1].solved) do
		sol[tonumber(k)] = v
	end
	setBoard()
end


local function flip()
	local swapInfo={}
	swapInfo[1]=currentBoard
	swapInfo[2]=blinkyPos	

	local a = currentBoard[blinkyPos[1]]
	local b = currentBoard[blinkyPos[2]] 

	currentBoard[blinkyPos[1]] = b
	currentBoard[blinkyPos[2]] = a

	--ipairs breaks at nil
	for i,id in ipairs(ids) do	
		msg.post(id, "swap", {flip = swapInfo})	
	end

	if currentLevel == 1 then
		msg.post("graphics", "handOff")	
	end
	local c = {}
	local s = {}
	for k,v in pairs(currentBoard) do 
		c[tostring(k)] = currentBoard[k]
	end
	for k,v in pairs(sol) do 
		s[tostring(k)] = sol[k]
	end
	fbinstant.set_player_data(zjson.encode({
		currentf = c,
		solf = s,
		levelf = currentLevel,
	}),function(self, success)
	end)
	
	if tablesEquivalent(currentBoard,sol) then
		msg.post("graphics","levelOver", {level = tostring(currentLevel)})
		for i,id in ipairs(ids) do	
			msg.post(id, "stop", {oldBlink = blinkyPos})	
		end
		msg.post("controller#complete", "play_sound")
		horizontal=true
	else
		msg.post("controller#flip", "play_sound")
	end

end

function initGame()
	fbinstant.get_player_data(zjson.encode({"currentf","solf","levelf",}), function(self, data)
		local data_f = json.decode(data)
		local l = data_f.levelf
		if l == nil then
			local placeVal = tostring(currentLevel)
			http.request("https://zeitnotentertainment.com/_functions/info?place="..placeVal, "GET", start_response)
		else
			for k,v in pairs (data_f.currentf) do
				currentBoard [tonumber(k)] = v
			end
			for k,v in pairs(data_f.solf) do
				sol[tonumber(k)] = v
			end
			currentLevel = tonumber(l)
			msg.post("graphics", "writeLevel", {current=currentLevel})
			msg.post("graphics", "yesConnection")
			setBoard()
			if tablesEquivalent(currentBoard,sol) then
				msg.post("graphics","levelOver", {level = tostring(currentLevel)})
				for i,id in ipairs(ids) do	
					msg.post(id, "stop", {oldBlink = blinkyPos})	
				end
			end				
		end		
	end)
end
local function paused()
	pause =1
end



function init(self)
	fbinstant.initialize(function(self, success)
		fbinstant.start_game(function(self, success)
			fbinstant.on_pause(paused)
		end)
	end)

	local tileY = 645
	for i=1,11 do
		local tileX = 60
		for k=1,11 do
			local no = k + (i*11)-11
			local pos1 = vmath.vector3(tileX, tileY, 0)
			local id = factory.create("#tileFactory", pos1, nil, {}, 0.9)
			table.insert(ids, id)
			msg.post(id, "tileNum", {number = no})
			tileX = tileX+96
		end	
		tileY = tileY+96
	end	
	initGame()
	math.randomseed(os.time())math.random()math.random()math.random()math.random()
	msg.post(".", "acquire_input_focus")	
end



function on_message(self, message_id, message, sender)
	if message_id == flipr then
		flip()
	end
	if message_id == up then
		moveUp()
	end
	if message_id == down then
		moveDown()
	end
	if message_id == right then
		moveRight()
	end
	if message_id == left then
		moveLeft()
	end
	if message_id == soundOn then
		sound.set_group_gain(hash("master"), 1)
	end
	if message_id == soundOff then
		sound.set_group_gain(hash("master"), 0)
	end
	if message_id == startSound then
		msg.post("controller#flip", "play_sound")
	end
	if message_id == buttonSound then
		msg.post("controller#move", "play_sound")
	end
	
	if message_id == showClue then 
		local keyset={}
		local clueInfo={}
		clueInfo[1]=currentBoard
		clueInfo[2]=sol
		for i,v in pairs(currentBoard) do 
			if currentBoard[i] ~= sol[i] then
				table.insert(keyset, i)
			end
		end
	
		math.random(#keyset) math.random(#keyset) math.random(#keyset)
		local randomV = keyset[math.random(#keyset)]
		clueInfo[3]=randomV
		for i,id in ipairs(ids) do	
			msg.post(id, "show", {info = clueInfo})	
		end
		--redundant,inited as empty
		for i, v in pairs(keyset) do keyset[i] = nil end
		math.random()
	end
	if message_id == playFlipSound then
		msg.post("controller#flip", "play_sound")
	end

	if message_id == retry then 
		for k,v in pairs (currentBoard) do
			currentBoard [k] = nil
		end
		for k,v in pairs (sol) do
			sol [k] = nil
		end
		initGame()
	end
	if message_id == share then
		if screenshot.html5 then
			screenshot.html5(function(self, base64_img)
				local payload = zjson.encode({ intent="SHARE", image=base64_img,text="Think.Flip.Spell"})
				fbinstant.share(payload,function(self,success)
				end)
			end)
		end
	end
	if message_id == next then
		for i,id in ipairs(ids) do	
			msg.post(id, "clearBoard")	
		end
		if canShow then
			fbinstant.show_interstitial_ad(ad_id1, function(self, success, error)
				if success then
					canShow = false
					canLoad = true
				end
			end)
		end
		updateBoard()		
	end
	
end


function on_input(self, action_id, action)
	if action_id == input_swap and action.pressed then
		flip()
	end
	
	if action_id == input_right and action.pressed then 
		moveRight()
	end

	if action_id == input_left and action.pressed then
		moveLeft()
	end

	if action_id == input_up and action.pressed then
		moveUp()
	end

	if action_id == input_down and action.pressed then
		moveDown()
	end	
end

